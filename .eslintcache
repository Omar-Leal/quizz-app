[{"/home/omarl/Documents/learning-code/typescript/quiz-app/src/index.tsx":"1","/home/omarl/Documents/learning-code/typescript/quiz-app/src/App.tsx":"2","/home/omarl/Documents/learning-code/typescript/quiz-app/src/components/QuestionCards.tsx":"3","/home/omarl/Documents/learning-code/typescript/quiz-app/src/API.tsx":"4","/home/omarl/Documents/learning-code/typescript/quiz-app/src/utils.ts":"5"},{"size":201,"mtime":1611828413176,"results":"6","hashOfConfig":"7"},{"size":2229,"mtime":1611931901114,"results":"8","hashOfConfig":"7"},{"size":967,"mtime":1611940722171,"results":"9","hashOfConfig":"7"},{"size":868,"mtime":1611916025703,"results":"10","hashOfConfig":"7"},{"size":122,"mtime":1611835306714,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"nn5jr5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/home/omarl/Documents/learning-code/typescript/quiz-app/src/index.tsx",[],["25","26"],"/home/omarl/Documents/learning-code/typescript/quiz-app/src/App.tsx",["27"],"import React, { useState } from 'react'\nimport { fetchQuizQuestions } from './API'\n\n// Styles \nimport './styles/main.css'\n\nimport QuestionCard from './components/QuestionCards'\n\n//types\nimport { QuestionsState, Difficulty } from './API'\n\n\n\ntype AnswerObjet = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS:number = 10;\n\nconst App = () => {\n  const [ loading, setLoading ] = useState(false);\n  const [ questions, setQuestions ] = useState<QuestionsState[]>([]);\n  const [ number, setNumbers ] = useState(0);\n  const [ userAnswers, setUserAnswers ] = useState<AnswerObjet[]>([]);\n  const [ score, setScore ] = useState(0);\n  const [ gameOver, setGameOver ] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n      setLoading(true);\n      setGameOver(false);\n\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.EASY\n      );\n\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumbers(0);\n      setLoading(false);\n\n\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n  }\n\n  const nextQuestion = () => {\n\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\">REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n      <button className=\"start\"\n      onClick={startTrivia}\n      >\n       START\n      </button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score</p> : null}\n      {loading ? <p>Loading Question... </p> : null }\n       \n      {!loading && !gameOver && (\n\n        <QuestionCard\n        questionNr={number + 1}\n        totalQuestion={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number]: undefined}\n        callback={checkAnswer}      \n        />  \n\n      )}\n\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?   (\n        <button\n        className=\"next\" \n        onClick={nextQuestion}>      \n          Next Question\n        </button> \n\n      ) :null }\n       \n\n    </div>\n  );\n}\n\nexport default App;\n","/home/omarl/Documents/learning-code/typescript/quiz-app/src/components/QuestionCards.tsx",[],"/home/omarl/Documents/learning-code/typescript/quiz-app/src/API.tsx",[],"/home/omarl/Documents/learning-code/typescript/quiz-app/src/utils.ts",["28"],"import React from 'react';\nexport const shuffleArray = (array: any[]) => \n  [...array].sort(() => Math.random() - 0.5);\n\n\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":28,"column":11,"nodeType":"35","messageId":"36","endLine":28,"endColumn":16},{"ruleId":"33","severity":1,"message":"37","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":13},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"@typescript-eslint/no-unused-vars","'score' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]